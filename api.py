"""
API FastAPI para o modelo Kickstarter Success Predictor

Para executar:
1. Certifique-se que o arquivo 'kickstarter_model_v1.pkl' existe
2. Instale as depend√™ncias: pip install fastapi uvicorn pandas scikit-learn joblib
3. Execute: python api.py
4. Acesse: http://localhost:8000/docs
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field, validator
from typing import List, Optional
from datetime import datetime
import joblib
import pandas as pd
import numpy as np
import os
from sklearn.preprocessing import StandardScaler, LabelEncoder

# =====================================================
# CLASSES NECESS√ÅRIAS PARA O MODELO
# =====================================================

class KickstarterPreprocessor:
    """
    Classe para processar dados do Kickstarter de forma consistente.
    Esta classe precisa ser id√™ntica √† usada no treinamento.
    """
    
    def __init__(self):
        self.label_encoders = {}
        self.scaler = StandardScaler()
        self.category_stats = None
        self.country_stats = None
        self.features_selected = [
            'cat_success_rate', 'usd_goal_real', 'campaign_days', 
            'goal_magnitude', 'cat_mean_goal', 'name_word_count',
            'cat_median_goal', 'goal_per_day', 'country_success_rate',
            'launch_year', 'main_category', 'name_length',
            'goal_category_ratio', 'country', 'goal_rounded'
        ]
        
    def create_features(self, df):
        """Cria todas as features necess√°rias"""
        df = df.copy()
        
        # Garantir tipos corretos
        df['deadline'] = pd.to_datetime(df['deadline'], errors='coerce')
        df['launched'] = pd.to_datetime(df['launched'], errors='coerce')
        
        # Features b√°sicas
        df['campaign_days'] = (df['deadline'] - df['launched']).dt.days
        df['launch_year'] = df['launched'].dt.year
        
        # Validar campaign_days
        df['campaign_days'] = df['campaign_days'].clip(lower=1, upper=365)
        
        # Features de texto
        df['name_length'] = df['name'].fillna('').str.len()
        df['name_word_count'] = df['name'].fillna('').str.split().str.len()
        
        # Features de meta
        df['usd_goal_real'] = df['usd_goal_real'].clip(upper=1e8)
        df['goal_magnitude'] = np.log10(df['usd_goal_real'].clip(lower=1) + 1)
        df['goal_rounded'] = (df['usd_goal_real'] % 1000 == 0).astype(int)
        
        return df
    
    def transform(self, df):
        """Transforma novos dados usando os transformadores ajustados"""
        df = self.create_features(df)
        
        # Aplicar estat√≠sticas
        df = df.merge(self.category_stats, left_on='main_category', right_index=True, how='left')
        df = df.merge(self.country_stats, left_on='country', right_index=True, how='left')
        
        # Preencher valores faltantes
        df['cat_success_rate'].fillna(0.35, inplace=True)
        df['cat_mean_goal'].fillna(10000, inplace=True)
        df['cat_median_goal'].fillna(5000, inplace=True)
        df['country_success_rate'].fillna(0.35, inplace=True)
        
        # Features derivadas
        df['goal_per_day'] = df['usd_goal_real'] / df['campaign_days'].replace(0, 1)
        df['goal_category_ratio'] = df['usd_goal_real'] / df['cat_median_goal'].replace(0, 1)
        
        # Tratar infinitos
        df['goal_per_day'] = df['goal_per_day'].replace([np.inf, -np.inf], 0).fillna(0)
        df['goal_category_ratio'] = df['goal_category_ratio'].replace([np.inf, -np.inf], 1).fillna(1)
        
        # Aplicar encoders
        for col, encoder in self.label_encoders.items():
            known_values = set(encoder.classes_)
            df[col] = df[col].apply(lambda x: x if x in known_values else list(known_values)[0])
            df[col] = encoder.transform(df[col])
        
        # Selecionar e escalar
        X = df[self.features_selected]
        X_scaled = self.scaler.transform(X)
        
        return X_scaled


class KickstarterPredictor:
    """Classe para fazer predi√ß√µes e gerar recomenda√ß√µes"""
    
    def __init__(self, model, preprocessor, threshold=0.5):
        self.model = model
        self.preprocessor = preprocessor
        self.threshold = threshold
    
    def predict_single(self, project_data):
        """Faz predi√ß√£o para um √∫nico projeto"""
        # Converter para DataFrame
        df = pd.DataFrame([project_data])
        
        # Processar
        X = self.preprocessor.transform(df)
        
        # Predizer
        proba = self.model.predict_proba(X)[0, 1]
        prediction = int(proba >= self.threshold)
        
        # Gerar recomenda√ß√µes
        recommendations = self._generate_recommendations(project_data, proba)
        
        return {
            'success_probability': float(proba),
            'prediction': 'Sucesso' if prediction else 'Falha',
            'confidence': self._calculate_confidence(proba),
            'recommendations': recommendations,
            'threshold_used': self.threshold
        }
    
    def _calculate_confidence(self, proba):
        """Calcula n√≠vel de confian√ßa da predi√ß√£o"""
        distance = abs(proba - self.threshold)
        if distance > 0.3:
            return 'Alta'
        elif distance > 0.15:
            return 'M√©dia'
        else:
            return 'Baixa'
    
    def _generate_recommendations(self, project_data, proba):
        """Gera recomenda√ß√µes personalizadas"""
        recommendations = []
        
        # An√°lise da meta
        goal = project_data.get('usd_goal_real', 0)
        if goal > 50000:
            recommendations.append("‚ö†Ô∏è Meta muito alta. Considere reduzir para aumentar chances.")
        elif goal < 1000:
            recommendations.append("‚úÖ Meta modesta, boa estrat√©gia para primeira campanha.")
        else:
            recommendations.append("‚úÖ Meta dentro da faixa recomendada.")
        
        # An√°lise da dura√ß√£o
        if 'campaign_days' not in project_data:
            launched = pd.to_datetime(project_data.get('launched'))
            deadline = pd.to_datetime(project_data.get('deadline'))
            campaign_days = (deadline - launched).days
        else:
            campaign_days = project_data.get('campaign_days')
            
        if campaign_days < 20:
            recommendations.append("‚ö†Ô∏è Campanha muito curta. Ideal entre 25-35 dias.")
        elif campaign_days > 45:
            recommendations.append("‚ö†Ô∏è Campanha muito longa. Pode perder momentum.")
        else:
            recommendations.append("‚úÖ Dura√ß√£o adequada da campanha.")
        
        # An√°lise do t√≠tulo
        name_words = len(project_data.get('name', '').split())
        if name_words < 3:
            recommendations.append("üí° T√≠tulo muito curto. Seja mais descritivo.")
        elif name_words > 10:
            recommendations.append("üí° T√≠tulo muito longo. Seja mais conciso.")
        
        # Recomenda√ß√£o geral
        if proba < 0.3:
            recommendations.append("üî¥ Risco alto de falha. Revise estrat√©gia completa.")
        elif proba < 0.5:
            recommendations.append("üü° Chances moderadas. Pequenos ajustes podem fazer diferen√ßa.")
        elif proba < 0.7:
            recommendations.append("üü¢ Boas chances de sucesso. Mantenha execu√ß√£o forte.")
        else:
            recommendations.append("üåü Excelentes chances! Foque na execu√ß√£o.")
        
        return recommendations


# =====================================================
# CONFIGURA√á√ÉO DA API
# =====================================================

app = FastAPI(
    title="Kickstarter Success Predictor API",
    description="API para prever sucesso de projetos no Kickstarter usando Machine Learning",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especifique os dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =====================================================
# MODELOS DE DADOS (SCHEMAS)
# =====================================================

class ProjectInput(BaseModel):
    """Schema para entrada de dados de um projeto"""
    
    name: str = Field(
        ..., 
        description="Nome/t√≠tulo do projeto",
        example="Amazing Solar-Powered Backpack"
    )
    
    main_category: str = Field(
        ...,
        description="Categoria principal do projeto",
        example="Technology"
    )
    
    country: str = Field(
        ...,
        description="C√≥digo do pa√≠s (2 letras)",
        example="US"
    )
    
    usd_goal_real: float = Field(
        ...,
        description="Meta em d√≥lares americanos (USD)",
        example=15000.0,
        gt=0,
        le=100000000
    )
    
    launched: str = Field(
        ...,
        description="Data de lan√ßamento (YYYY-MM-DD)",
        example="2024-03-01"
    )
    
    deadline: str = Field(
        ...,
        description="Data limite (YYYY-MM-DD)",
        example="2024-03-31"
    )
    
    @validator('country')
    def validate_country(cls, v):
        if len(v) != 2:
            raise ValueError('Pa√≠s deve ter c√≥digo de 2 letras (ex: US, GB, BR)')
        return v.upper()
    
    @validator('main_category')
    def validate_category(cls, v):
        valid_categories = [
            'Film & Video', 'Music', 'Publishing', 'Games', 'Technology',
            'Design', 'Art', 'Comics', 'Theater', 'Food', 'Photography',
            'Fashion', 'Dance', 'Journalism', 'Crafts'
        ]
        if v not in valid_categories:
            raise ValueError(f'Categoria inv√°lida. Use uma das: {", ".join(valid_categories)}')
        return v
    
    @validator('deadline')
    def validate_dates(cls, v, values):
        if 'launched' in values:
            try:
                launched_date = datetime.strptime(values['launched'], '%Y-%m-%d')
                deadline_date = datetime.strptime(v, '%Y-%m-%d')
                
                if deadline_date <= launched_date:
                    raise ValueError('Deadline deve ser ap√≥s a data de lan√ßamento')
                
                days_diff = (deadline_date - launched_date).days
                if days_diff > 365:
                    raise ValueError('Campanha n√£o pode durar mais de 365 dias')
                if days_diff < 1:
                    raise ValueError('Campanha deve durar pelo menos 1 dia')
                    
            except ValueError as e:
                if "time data" in str(e):
                    raise ValueError('Data deve estar no formato YYYY-MM-DD')
                raise
        return v


class PredictionOutput(BaseModel):
    """Schema para resposta da predi√ß√£o"""
    
    success_probability: float = Field(..., description="Probabilidade de sucesso (0.0 a 1.0)")
    prediction: str = Field(..., description="Predi√ß√£o final: 'Sucesso' ou 'Falha'")
    confidence: str = Field(..., description="N√≠vel de confian√ßa: 'Alta', 'M√©dia' ou 'Baixa'")
    recommendations: List[str] = Field(..., description="Lista de recomenda√ß√µes personalizadas")
    threshold_used: float = Field(..., description="Threshold usado para classifica√ß√£o")
    
    class Config:
        schema_extra = {
            "example": {
                "success_probability": 0.743,
                "prediction": "Sucesso",
                "confidence": "Alta",
                "recommendations": [
                    "‚úÖ Meta dentro da faixa recomendada.",
                    "‚úÖ Dura√ß√£o adequada da campanha.",
                    "üåü Excelentes chances! Foque na execu√ß√£o."
                ],
                "threshold_used": 0.317
            }
        }


class BatchInput(BaseModel):
    """Schema para predi√ß√£o em lote"""
    projects: List[ProjectInput]


class ModelInfo(BaseModel):
    """Schema para informa√ß√µes do modelo"""
    version: str
    training_date: str
    metrics: dict
    features_used: List[str]
    threshold: float


class HealthCheck(BaseModel):
    """Schema para health check"""
    status: str
    model_loaded: bool
    timestamp: str


# =====================================================
# CARREGAR MODELO
# =====================================================

MODEL_PATH = 'kickstarter_model_v1.pkl'
model_data = None
predictor = None

def load_model():
    """Carrega o modelo do disco"""
    global model_data, predictor
    
    if not os.path.exists(MODEL_PATH):
        raise FileNotFoundError(
            f"Modelo n√£o encontrado em '{MODEL_PATH}'. "
            "Execute o script de treinamento primeiro."
        )
    
    print(f"Carregando modelo de '{MODEL_PATH}'...")
    model_data = joblib.load(MODEL_PATH)
    
    predictor = KickstarterPredictor(
        model=model_data['model'],
        preprocessor=model_data['preprocessor'],
        threshold=model_data['optimal_threshold']
    )
    
    print(f"‚úì Modelo carregado com sucesso!")
    print(f"  Vers√£o: {model_data['version']}")
    print(f"  Treinado em: {model_data['training_date']}")
    print(f"  AUC-ROC: {model_data['metrics']['auc_roc']:.4f}")

# Tentar carregar modelo ao iniciar
try:
    load_model()
except Exception as e:
    print(f"‚ö†Ô∏è Erro ao carregar modelo: {e}")

# =====================================================
# ENDPOINTS DA API
# =====================================================

@app.get("/", tags=["Root"])
async def root():
    """Endpoint raiz com informa√ß√µes b√°sicas"""
    return {
        "message": "Kickstarter Success Predictor API",
        "version": "1.0.0",
        "status": "online" if predictor else "modelo n√£o carregado",
        "endpoints": {
            "documenta√ß√£o_interativa": "/docs",
            "documenta√ß√£o_alternativa": "/redoc",
            "fazer_predi√ß√£o": "/predict",
            "predi√ß√£o_em_lote": "/predict/batch",
            "informa√ß√µes_do_modelo": "/info/model",
            "categorias_v√°lidas": "/info/categories",
            "pa√≠ses_suportados": "/info/countries",
            "health_check": "/health"
        }
    }


@app.get("/health", response_model=HealthCheck, tags=["Health"])
async def health_check():
    """Verifica se a API est√° funcionando"""
    return {
        "status": "healthy" if predictor else "unhealthy",
        "model_loaded": predictor is not None,
        "timestamp": datetime.now().isoformat()
    }


@app.post("/predict", response_model=PredictionOutput, tags=["Prediction"])
async def predict_project(project: ProjectInput):
    """
    Faz predi√ß√£o para um √∫nico projeto Kickstarter.
    
    Retorna:
    - Probabilidade de sucesso (0-100%)
    - Predi√ß√£o final (Sucesso/Falha)
    - N√≠vel de confian√ßa
    - Recomenda√ß√µes personalizadas
    """
    
    if not predictor:
        raise HTTPException(
            status_code=503,
            detail="Modelo n√£o est√° carregado. Reinicie a API."
        )
    
    try:
        project_data = project.dict()
        result = predictor.predict_single(project_data)
        return result
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao fazer predi√ß√£o: {str(e)}"
        )


@app.post("/predict/batch", tags=["Prediction"])
async def predict_batch(batch: BatchInput):
    """
    Faz predi√ß√£o para m√∫ltiplos projetos de uma vez.
    
    √ötil para analisar portf√≥lios ou comparar diferentes configura√ß√µes.
    """
    
    if not predictor:
        raise HTTPException(
            status_code=503,
            detail="Modelo n√£o est√° carregado."
        )
    
    results = []
    
    for project in batch.projects:
        try:
            project_data = project.dict()
            result = predictor.predict_single(project_data)
            
            results.append({
                "project_name": project.name,
                "success": True,
                "result": result
            })
            
        except Exception as e:
            results.append({
                "project_name": project.name,
                "success": False,
                "error": str(e)
            })
    
    successful = sum(1 for r in results if r['success'])
    
    return {
        "total_projects": len(batch.projects),
        "successful_predictions": successful,
        "failed_predictions": len(batch.projects) - successful,
        "results": results
    }


@app.get("/info/model", response_model=ModelInfo, tags=["Information"])
async def get_model_info():
    """Retorna informa√ß√µes detalhadas sobre o modelo"""
    
    if not model_data:
        raise HTTPException(
            status_code=503,
            detail="Modelo n√£o est√° carregado"
        )
    
    return {
        "version": model_data['version'],
        "training_date": model_data['training_date'],
        "metrics": model_data['metrics'],
        "features_used": model_data['feature_names'],
        "threshold": model_data['optimal_threshold']
    }


@app.get("/info/categories", tags=["Information"])
async def get_categories():
    """Lista todas as categorias v√°lidas com estat√≠sticas"""
    
    return {
        "total": 15,
        "categories": [
            {"value": "Film & Video", "description": "Filmes, document√°rios, v√≠deos", "avg_success": "42%"},
            {"value": "Music", "description": "√Ålbuns, shows, instrumentos", "avg_success": "53%"},
            {"value": "Publishing", "description": "Livros, revistas, e-books", "avg_success": "35%"},
            {"value": "Games", "description": "Jogos de tabuleiro, card games, RPG", "avg_success": "44%"},
            {"value": "Technology", "description": "Gadgets, apps, hardware", "avg_success": "24%"},
            {"value": "Design", "description": "Produtos, m√≥veis, acess√≥rios", "avg_success": "42%"},
            {"value": "Art", "description": "Pinturas, esculturas, instala√ß√µes", "avg_success": "45%"},
            {"value": "Comics", "description": "HQs, graphic novels, mang√°s", "avg_success": "59%"},
            {"value": "Theater", "description": "Pe√ßas, musicais, performances", "avg_success": "64%"},
            {"value": "Food", "description": "Restaurantes, produtos aliment√≠cios", "avg_success": "28%"},
            {"value": "Photography", "description": "Projetos fotogr√°ficos, livros de fotos", "avg_success": "34%"},
            {"value": "Fashion", "description": "Roupas, cal√ßados, acess√≥rios", "avg_success": "28%"},
            {"value": "Dance", "description": "Espet√°culos, workshops, v√≠deos", "avg_success": "65%"},
            {"value": "Journalism", "description": "Reportagens, document√°rios jornal√≠sticos", "avg_success": "24%"},
            {"value": "Crafts", "description": "Artesanato, DIY, kits", "avg_success": "27%"}
        ]
    }


@app.get("/info/countries", tags=["Information"])
async def get_countries():
    """Lista pa√≠ses suportados pelo modelo"""
    
    return {
        "total": 22,
        "main_countries": {
            "US": "Estados Unidos (70% dos projetos)",
            "GB": "Reino Unido (8% dos projetos)",
            "CA": "Canad√° (4% dos projetos)",
            "AU": "Austr√°lia (3% dos projetos)"
        },
        "all_countries": {
            "US": "Estados Unidos",
            "GB": "Reino Unido",
            "CA": "Canad√°",
            "AU": "Austr√°lia",
            "DE": "Alemanha",
            "FR": "Fran√ßa",
            "IT": "It√°lia",
            "ES": "Espanha",
            "NL": "Pa√≠ses Baixos",
            "SE": "Su√©cia",
            "NO": "Noruega",
            "DK": "Dinamarca",
            "IE": "Irlanda",
            "BE": "B√©lgica",
            "CH": "Su√≠√ßa",
            "AT": "√Åustria",
            "NZ": "Nova Zel√¢ndia",
            "SG": "Singapura",
            "HK": "Hong Kong",
            "JP": "Jap√£o",
            "MX": "M√©xico",
            "BR": "Brasil"
        }
    }


@app.post("/reload-model", tags=["Admin"])
async def reload_model():
    """Recarrega o modelo do disco"""
    
    try:
        load_model()
        return {
            "status": "success",
            "message": "Modelo recarregado com sucesso",
            "model_version": model_data['version'],
            "training_date": model_data['training_date']
        }
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao recarregar modelo: {str(e)}"
        )


@app.get("/example/curl", tags=["Examples"])
async def example_curl():
    """Exemplo de uso com cURL"""
    
    return {
        "description": "Exemplo de comando cURL para fazer uma predi√ß√£o",
        "command": """curl -X POST "http://localhost:8000/predict" \\
     -H "Content-Type: application/json" \\
     -d '{
       "name": "Revolutionary Smart Watch with AI",
       "main_category": "Technology",
       "country": "US",
       "usd_goal_real": 25000,
       "launched": "2024-03-01",
       "deadline": "2024-03-31"
     }'"""
    }


@app.get("/example/python", tags=["Examples"])
async def example_python():
    """Exemplo de uso com Python"""
    
    return {
        "description": "Exemplo de c√≥digo Python para usar a API",
        "code": """import requests

# URL da API
url = "http://localhost:8000/predict"

# Dados do projeto
project = {
    "name": "Revolutionary Smart Watch with AI",
    "main_category": "Technology",
    "country": "US",
    "usd_goal_real": 25000,
    "launched": "2024-03-01",
    "deadline": "2024-03-31"
}

# Fazer requisi√ß√£o
response = requests.post(url, json=project)

# Processar resposta
if response.status_code == 200:
    result = response.json()
    print(f"Probabilidade de sucesso: {result['success_probability']:.1%}")
    print(f"Predi√ß√£o: {result['prediction']}")
    print(f"Confian√ßa: {result['confidence']}")
    print("\\nRecomenda√ß√µes:")
    for rec in result['recommendations']:
        print(f"  - {rec}")
else:
    print(f"Erro: {response.status_code}")
    print(response.json())"""
    }


@app.get("/example/javascript", tags=["Examples"])
async def example_javascript():
    """Exemplo de uso com JavaScript"""
    
    return {
        "description": "Exemplo de c√≥digo JavaScript para usar a API",
        "code": """// Fun√ß√£o para fazer predi√ß√£o
async function predictKickstarterProject() {
    const project = {
        name: "Revolutionary Smart Watch with AI",
        main_category: "Technology",
        country: "US",
        usd_goal_real: 25000,
        launched: "2024-03-01",
        deadline: "2024-03-31"
    };
    
    try {
        const response = await fetch('http://localhost:8000/predict', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(project)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log(`Probabilidade: ${(result.success_probability * 100).toFixed(1)}%`);
            console.log(`Predi√ß√£o: ${result.prediction}`);
            console.log(`Confian√ßa: ${result.confidence}`);
            console.log('Recomenda√ß√µes:');
            result.recommendations.forEach(rec => console.log(`  - ${rec}`));
        } else {
            console.error('Erro:', await response.json());
        }
    } catch (error) {
        console.error('Erro de conex√£o:', error);
    }
}

// Executar
predictKickstarterProject();"""
    }


# =====================================================
# EXECUTAR SERVIDOR
# =====================================================

if __name__ == "__main__":
    import uvicorn
    
    print("\n" + "="*60)
    print("üöÄ KICKSTARTER SUCCESS PREDICTOR API")
    print("="*60)
    print("\nüìå Documenta√ß√£o interativa: http://localhost:8000/docs")
    print("üìå Documenta√ß√£o alternativa: http://localhost:8000/redoc")
    print("üìå Testar predi√ß√£o: POST http://localhost:8000/predict")
    print("\n‚ú® Dica: Use a documenta√ß√£o interativa para testar a API!")
    print("\nPressione CTRL+C para parar o servidor\n")
    
    # Configura√ß√µes do servidor
    uvicorn.run(
        "api:app",  # Se o arquivo se chamar api.py
        host="127.0.0.1",  # Aceita conex√µes de qualquer IP
        port=8000,  # Porta padr√£o
        reload=True,  # Recarrega automaticamente ao salvar o arquivo
        log_level="info"  # N√≠vel de log
    )